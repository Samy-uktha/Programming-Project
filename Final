import tkinter as tk
import tkinter.font as font
from tkinter import messagebox
from tkinter import ttk

class ShoppingGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("Shopping Cart")

        self.items = [
            {"name": "Apple", "price": 10},
            {"name": "Orange", "price": 20},
            {"name": "Banana", "price": 10},
            {"name": "Mango", "price": 30}
        ]

        self.shopping_cart = []

        self.create_widgets()

    def create_widgets(self):
        self.item_buttons = []

        for item in self.items:
            button = tk.Button(self.master, bg = "light blue", height= 2, width = 15, text=item["name"], command=lambda item=item: self.add_to_cart(item))
            button.pack(pady=3)
            self.item_buttons.append(button)

        myFont = font.Font(family='Helvetica', size=15, weight='bold')

        self.checkout_button = tk.Button(self.master,bg = "green", height= 2 ,width = 10, text="Checkout",font = myFont, command=self.show_bill)
        self.checkout_button.pack(side = "bottom", pady=10)

    def add_to_cart(self, item):
        name = item["name"]
        price = item["price"]

        for row in self.shopping_cart:
            if row["name"] == name:
                row["quantity"] += 1
                break
        else:
            self.shopping_cart.append({"name": name, "quantity": 1, "price": price})

    def show_bill(self):
        bill_window = tk.Toplevel(self.master)
        bill_window.title("Bill")

        self.cart_table = ttk.Treeview(bill_window, columns=("item", "price","quantity", "total price"), show="headings")
        self.cart_table.heading("item", text="Item")
        self.cart_table.heading("quantity", text="Quantity")
        self.cart_table.heading("price", text="Price")
        self.cart_table.heading("total price", text="Total Price")
        self.cart_table.pack()

        self.cart_table.delete(*self.cart_table.get_children())

        for item in self.shopping_cart:
            total_price = item["quantity"] * item['price']
            row = (item["name"],f"${item['price']}" ,item["quantity"], f"${total_price}")
            self.cart_table.insert("", "end", values=row)

        total_cost = sum(item["price"] * item["quantity"] for item in self.shopping_cart)
        total_row = ("Total Cost:", "","", f"${total_cost}")
        self.cart_table.insert("", "end", values=total_row)

        self.payment_frame = tk.Frame(bill_window)
        self.payment_frame.pack(pady=10)

        tk.Label(self.payment_frame, text="Payment Details").grid(row=0, column=0, columnspan=2, pady=5)
        tk.Label(self.payment_frame, text="Card Number:").grid(row=1, column=0, sticky=tk.E)
        self.card_entry = tk.Entry(self.payment_frame)
        self.card_entry.grid(row=1, column=1, padx=5)
        tk.Label(self.payment_frame, text="Name on Card:").grid(row=2, column=0, sticky=tk.E)
        self.name_entry = tk.Entry(self.payment_frame)
        self.name_entry.grid(row=2, column=1, padx=5)
        tk.Label(self.payment_frame, text="CVV:").grid(row=3, column=0, sticky=tk.E)
        self.cvv_entry = tk.Entry(self.payment_frame)
        self.cvv_entry.grid(row=3, column=1, padx=5)

        self.checkout_button = tk.Button(bill_window, text="Checkout", command=self.checkout)
        self.checkout_button.pack()

    def checkout(self):
        card_number = self.card_entry.get()
        name_on_card = self.name_entry.get()
        cvv = self.cvv_entry.get()

        if card_number and name_on_card and cvv:
            if len(str(card_number)) != 16:
                messagebox.showinfo("Invalid Card Number", "Please enter a valid 16 digit card number")
            elif type(name_on_card) is not str:
                messagebox.showinfo("Invalid Name", "Please enter a valid name")
            elif len(str(cvv)) != 3:
                messagebox.showinfo("Invalid CVV", "Please enter a valid 3 digit CVV")
            else:
                messagebox.showinfo("Checkout", f"Payment Successful!")
                self.shopping_cart.clear()
                self.clear_payment_fields()
                for button in self.item_buttons:
                    button.config(state=tk.NORMAL)
        else:
            messagebox.showerror("Error", "Please fill in all payment details.")

    def clear_payment_fields(self):
        self.card_entry.delete(0, tk.END)
        self.name_entry.delete(0, tk.END)
        self.cvv_entry.delete(0, tk.END)
root = tk.Tk()
root.bg = "pink"
root.geometry("300x500")
app = ShoppingGUI(root)
root.mainloop()
